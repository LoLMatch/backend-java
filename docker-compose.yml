version: '3.8'

services:
  db:
    build:
      context: .
      dockerfile: database/Dockerfile
    image: postgres:lolmatch
    container_name: "database"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=keycloak
    ports:
      - "5432:5432"
    networks:
      - network
    healthcheck:
      test: "pg_isready -U postgres"

  rabbitmq:
    build:
      context: .
      dockerfile: rabbitmq/Dockerfile
    container_name: "rabbitmq"
    image: rabbitmq:lolmatch
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - network
    healthcheck:
      test: "rabbitmq-diagnostics -q ping"

  keycloak:
    build:
      context: .
      dockerfile: keycloak/Dockerfile
      # tak mozna zrobic
      # args:
      #   - AMQP_USERNAME=user
      #   - AMQP_PASSWORD=password
    container_name: "keycloak"
    image: keycloak:lolmatch
    ports:
      - "8443:8443"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "echo -n > /dev/tcp/127.0.0.1/8443"]

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    image: api-gateway:lolmatch
    environment:
      - SPRING_PROFILES_ACTIVE=dev # extra logs + docker settings -> application-dev.properties
    ports:
      - '8080:8080'
    networks:
      - network
    depends_on:
      - keycloak

  chat-service:
    build:
      context: .
      dockerfile: chat/Dockerfile
    container_name: "chat-service"
    image: chat-service:lolmatch
    ports:
      - '8081:8080'
    networks:
      - network
    depends_on:
      keycloak:
        condition: service_healthy
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

networks:
  network:
    driver: bridge

